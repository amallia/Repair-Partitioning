#ifndef PARTITIONING_H
#define PARTITIONING_H

#include <vector>
#include <string>
#include <ostream>
#include <iostream>
#include <unordered_map>
#include <set>
#include <assert.h>
#include "../util/md5.h"
#include "../repair-algorithm/RepairTreeNode.h"

class SortNodesByOffsetComparator
{
public:
	bool operator() (const RepairTreeNode* const lhs, const RepairTreeNode* const rhs) const
	{
		return lhs->getOffset() < rhs->getOffset();
	}
};

typedef std::set<RepairTreeNode*, SortNodesByOffsetComparator> SortedByOffsetNodeSet;

class RepairDocumentPartition
{
	unsigned maxNumCalls;
	
	unsigned numCallsSoFar;

	std::vector<BaseFragment> baseFragments;

	// The list of associations generated by repair
	std::unordered_map<unsigned, Association> associations; // TODO we may no longer need this, it was only used in getBestHorizontalCut....

	// Get the nodes for the first n levels of the tree: these define hierarchical fragments of the document version
	void getNodesTopNLevels(RepairTreeNode* node, unsigned numLevelsDown, SortedByOffsetNodeSet& nodes);

	// Given the set of nodes chosen by the selection algorithm, get all the possible fragments
	void getBaseFragmentsOneVersion(
		const SortedByOffsetNodeSet& nodes,
		BaseFragmentList& baseFragmentsOneVersion);

	// Another one, greedy approach
	// SortedByOffsetNodeSet getBestHorizontalCut(RepairTreeNode* node, int numLevels, bool& tooManyCalls);

	// double getSubsetScore(SortedByOffsetNodeSet subset);

	// Populates unique frags using the boundaries found by the partitioning algorithm
	// void updateUniqueFragmentHashMap();

	// Populates this->fragments NOT USED
	// void setFragmentInfo(const std::vector<std::vector<unsigned> >& versions, std::ostream& os, bool print);
public:
	RepairDocumentPartition(std::unordered_map<unsigned, Association>& associations)
		 :
		associations(associations)
	{
		baseFragments = std::vector<BaseFragment>();
		maxNumCalls = 100;
		numCallsSoFar = 0;
	}

	// Populate the list of base fragments for one version
	void getPartitioningOneVersion(
		RepairTreeNode* root,
		BaseFragmentList& baseFragmentsOneVersion,
		unsigned versionSize,
		unsigned numLevelsDown);
};

#endif
